Figure out how the applicative libraries collect options in a record
structure regardless of their order on the line.

We should be able to collect results "idiomatically" without first
building a list and then folding it.

The fold interface is quite flexible, however. I don't yet see
a reason to change it.

I want a parser combinator that takes a conversion function
f : String → Maybe β (which could be translated to CPS rather than
using the Maybe type) and constructs a parser of type [β] + String.
This parser succeeds with a [β] if the parsed strings were all
successfully converted, and fails with an error message otherwise.

Generalizing f to String → β + String (result or error message),
you might think of using either-join. But that's a mistake: parsers
aren't Eithers, they're functions [String] → Either .... So any
use of either-join would be after the parser is applied.
